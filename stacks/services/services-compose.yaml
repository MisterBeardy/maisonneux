version: "3.9"
services:
  # FireflyIII - Accounting and money management
  fireflyiii:
    image: fireflyiii/core:latest
    container_name: fireflyIII
    networks:
      proxy_network:
        ipv4_address: 172.18.1.121
      firefly_network:
        ipv4_address: 172.18.2.49
    volumes:
      - ${CONFIG_FOLDER}/fireflyiii:/var/www/html/storage/upload
    ports:
      - 8668:8080/tcp
    environment:
      - APP_KEY=${FIREFLY_KEY}
      - DB_CONNECTION=mysql
      - DB_DATABASE=${FIREFLY_DB}
      - DB_HOST=mariadb
      - DB_PASSWORD=${FIREFLY_DB_PASSWORD}
      - DB_PORT=3306
      - DB_USERNAME=${FIREFLY_DB_USER}
    restart: unless-stopped
  
  ## Firefly III - data importer
  




  # Bookstack - Docs server
  bookstack:
    image: linuxserver/bookstack:latest
    container_name: bookstack
    networks:
      proxy_network:
        ipv4_address: 172.18.1.122
      bookstack_network:
        ipv4_address: 172.18.2.57
    volumes:
      - ${CONFIG_FOLDER}/bookstack:/config
    ports:
      - 6875:80/tcp
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - APP_URL=https://docs.${DOMAIN_NAME}
      - DB_DATABASE=${BOOKSTACK_DB}
      - DB_HOST=mariadb
      - DB_USER=${BOOKSTACK_DB_USER}
      - DB_PASS=${BOOKSTACK_DB_PASSWORD}
      # Authentication - https://www.bookstackapp.com/docs/admin/oidc-auth/
      - AUTH_METHOD=oidc
      - AUTH_AUTO_INITIATE=true
      - OIDC_NAME=authentik
      - OIDC_DISPLAY_NAME_CLAIMS=name
      - OIDC_CLIENT_ID=${BOOKSTACK_OIDC_ID}
      - OIDC_CLIENT_SECRET=${BOOKSTACK_OIDC_SECRET}
      - OIDC_ISSUER=https://auth.${DOMAIN_NAME}/application/o/bookstack/
      - OIDC_ISSUER_DISCOVER=true

      - SESSION_LIFETIME=1440  # Session lifetime (mins)
      # - OIDC_DUMP_USER_DETAILS=true
    labels:
      - "traefik.enable=true"
      ## HTTP Router
      - "traefik.http.routers.bookstack-rtr.entrypoints=websecure"
      - "traefik.http.routers.bookstack-rtr.rule=Host(`docs.${DOMAIN_NAME}`)"
      - "traefik.http.routers.bookstack-rtr.tls=true"
      # - "traefik.http.routers.bookstack-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.bookstack-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.bookstack-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.bookstack-rtr.service=bookstack-svc"
      - "traefik.http.services.bookstack-svc.loadbalancer.server.port=80"
    restart: unless-stopped
  # Gitea - Self-hosted Git service
  # https://docs.gitea.io/en-us/install-with-docker/
  gitea:
    image: gitea/gitea:latest
    container_name: gitea
    networks:
      proxy_network:
        ipv4_address: 172.18.1.123
      gitea_network:
        ipv4_address: 172.18.2.65
    volumes:
      - ${DATA_FOLDER}/gitea:/git
      - ${CONFIG_FOLDER}/gitea:/data
      - /var/log/gitea:/var/log/gitea
      # - /etc/localtime:/etc/localtime:ro
    ports:
    #   - 2222:22/tcp   # SSH 
      - 3001:3000/tcp # Web view
    environment:
      - DISABLE_REGISTRATION=true
      - GITEA_CUSTOM=/data
      # Database configuration
      - GITEA__database__DB_TYPE=mysql
      - GITEA__database__HOST=mariadb:3306
      - GITEA__database__NAME=${GITEA_DB}
      - GITEA__database__USER=${GITEA_DB_USER}
      - GITEA__database__PASSWD=${GITEA_DB_PASSWORD}
      - GITEA__database__LOG_SQL=false
      # Logs
      - GITEA__log__ROOT_PATH=/var/log/gitea
      - GITEA__log__MODE=console,file
      - GITEA__log__LEVEL=Info
      - GITEA__log__ENABLE_ACCESS_LOG=true
      - GITEA__log__ACCESS=file  # Stored in $ROOT_PATH/access.log

      - ROOT_URL=https://git.${DOMAIN_NAME}/
      - DOMAIN=${DOMAIN_NAME}
      - SSH_DOMAIN=${DOMAIN_NAME}
      - SSH_EXPOSE_ANONYMOUS=false
      - USER_UID=${USERID}
      - USER_GID=${GROUPID}
      - USER=git
    labels:
      - "traefik.enable=true"
      ## HTTP Router
      - "traefik.http.routers.gitea-rtr.entrypoints=websecure"
      - "traefik.http.routers.gitea-rtr.rule=Host(`git.${DOMAIN_NAME}`)"
      - "traefik.http.routers.gitea-rtr.tls=true"
      # - "traefik.http.routers.gitea-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.gitea-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.gitea-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.gitea-rtr.service=gitea-svc"
      - "traefik.http.services.gitea-svc.loadbalancer.server.port=3000"
    restart: unless-stopped
  # Vaultwarden - Password manager
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    networks:
      proxy_network:
        ipv4_address: 172.18.1.124
    volumes:
      - ${CONFIG_FOLDER}/vaultwarden:/data
      - /var/log/vaultwarden:/var/log/vaultwarden
    # ports:
    #   - 3012:3012/tcp # WS server
    #   - 8888:8888/tcp # Web page
    environment:
      # Logs to be collected by Crowdsec
      - LOG_FILE=/var/log/vaultwarden/vaultwarden.log
      - LOG_LEVEL=info
      - EXTENDED_LOGGING=true
      - ROCKET_CLI_COLORS=false
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
      - INVITATIONS_ALLOWED=false
      - SIGNUPS_ALLOWED=false
      - SHOW_PASSWORD_HINT=false
      - ROCKET_PORT=8888
    labels:
      - "traefik.enable=true"
      # Web UI
      ## HTTP Router
      - "traefik.http.routers.vaultwarden-rtr.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden-rtr.rule=Host(`vault.${DOMAIN_NAME}`)"
      - "traefik.http.routers.vaultwarden-rtr.tls=true"
      # - "traefik.http.routers.vaultwarden-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.vaultwarden-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-rtr.service=vaultwarden-svc"
      - "traefik.http.services.vaultwarden-svc.loadbalancer.server.port=8888"
      # Websocker (notifications, etc.)
      ## HTTP Router
      - "traefik.http.routers.vaultwarden-ws-rtr.entrypoints=websecure"
      - "traefik.http.routers.vaultwarden-ws-rtr.rule=Host(`vault.${DOMAIN_NAME}`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.vaultwarden-ws-rtr.tls=true"
      # - "traefik.http.routers.vaultwarden-ws-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.vaultwarden-ws-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.vaultwarden-ws-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.vaultwarden-ws-rtr.service=vaultwarden-ws-svc"
      - "traefik.http.services.vaultwarden-ws-svc.loadbalancer.server.port=3012"
    restart: unless-stopped

  # Code-server - Self-hosted web VSCode
  # code-server:
  #   image: ghcr.io/linuxserver/code-server:version-v3.8.0
  #   container_name: code-server
  #   networks:
  #     proxy_network:
  #       ipv4_address: 172.18.1.125
  #   volumes:
  #     - ${CONFIG_FOLDER}/codeserver:/config
  #     # - /etc/localtime:/etc/localtime:ro
  #     # - /var/run/docker.sock:/var/run/docker.sock # For docker development
  #   ports:
  #     - 8443:8443
  #     - 41237:41237 # SSH
  #   environment:
  #     - HOME=/config
  #     - PUID=${USERID}
  #     - PGID=${GROUPID}
  #     - TZ=${TIMEZONE}
  #     - PASSWORD=${CODE_PASSWORD}
  #     - SUDO_PASSWORD=${CODE_SUDO_PASSWORD}
  #     - DOCKER_MODS=linuxserver/mods:universal-git|linuxserver/mods:code-server-python3|linuxserver/mods:code-server-python2|linuxserver/mods:code-server-php|linuxserver/mods:code-server-nodejs|linuxserver/mods:code-server-npmglobal|linuxserver/mods:code-server-golang|linuxserver/mods:code-server-dotnet|linuxserver/mods:code-server-docker
  #   restart: unless-stopped
  # Tandoor - Recipes server
  tandoor:
    image: vabene1111/recipes:latest
    container_name: tandoor
    networks:
      proxy_network:
        ipv4_address: 172.18.1.126
      tandoor_network:
        ipv4_address: 172.18.2.73
    volumes:
      - ${CONFIG_FOLDER}/tandoorrecipes/mediafiles:/opt/recipes/mediafiles
      - ${CONFIG_FOLDER}/tandoorrecipes/staticfiles:/opt/recipes/staticfiles
    ports:
      - 8753:8080/tcp
    environment:
      - DEBUG=0
      - SECRET_KEY=${TANDOOR_KEY}
      - DB_ENGINE=django.db.backends.postgresql
      - POSTGRES_DB=${TANDOOR_DB}
      - POSTGRES_HOST=postgres
      - POSTGRES_PASSWORD=${TANDOOR_DB_PASSWORD}
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${TANDOOR_DB_USER}
    restart: unless-stopped
  # Gotify - Notification server
  gotify:
    image: gotify/server:latest
    container_name: gotify
    networks:
      proxy_network:
        ipv4_address: 172.18.1.127
    volumes:
      - ${CONFIG_FOLDER}/gotify:/app/data
      # - /etc/localtime:/etc/localtime:ro
    # ports:
    #   - 8800:8800/tcp
    environment:
      - GOTIFY_DATABASE_CONNECTION=data/gotify.db
      - GOTIFY_DATABASE_DIALECT=sqlite3
      - GOTIFY_SERVER_PORT=8800
    restart: unless-stopped
  # CyberChef
  cyberchef:
    image: mpepping/cyberchef:latest
    container_name: cyberchef
    networks:
      proxy_network:
        ipv4_address: 172.18.1.128
    ports:
      - 8095:8000
    restart: unless-stopped
  # Immich stack - Photo server
  immich-server:
    image: ghcr.io/immich-app/immich-server:release
    container_name: immich_server
    entrypoint: ["/bin/sh", "./start-server.sh"]
    networks:
      immich_network:
        ipv4_address: 172.18.2.97
      proxy_network:
        ipv4_address: 172.18.1.130
    volumes:
      - ${DATA_FOLDER}/photos:/usr/src/app/upload
    env_file:
      - stack.env
    environment:
      - NODE_ENV=production
      - DB_HOSTNAME=postgres
      - DB_USERNAME=${IMMICH_DB_USER}
      - DB_PASSWORD=${IMMICH_DB_PASS}
      - DB_DATABASE_NAME=${IMMICH_DB}
      - REDIS_HOSTNAME=redis
      - ENABLE_MAPBOX=false
      - JWT_SECRET=${IMMICH_JWT_SECRET}
      - VITE_SERVER_ENDPOINT=https://photos.${DOMAIN_NAME}/api
      # OAuth settings : https://immich.app/docs/usage/oauth
      - OAUTH_ENABLED=true
      - OAUTH_ISSUER_URL=https://auth.${DOMAIN_NAME}/application/o/immich/
      - OAUTH_CLIENT_ID=${IMMICH_OAUTH_ID}
      - OAUTH_CLIENT_SECRET=${IMMICH_OAUTH_SECRET}
      # - OAUTH_SCOPE=   # Default to 'openid email profile'
      - OAUTH_AUTO_REGISTER=true
      - OAUT_BUTTON_TEXT="Login with Authentik"
    labels:
      - "traefik.enable=true"
      # Web UI
      ## HTTP Router
      - "traefik.http.routers.immich-rtr.entrypoints=websecure"
      - "traefik.http.routers.immich-rtr.rule=Host(`photos.${DOMAIN_NAME}`)"
      - "traefik.http.routers.immich-rtr.tls=true"
      # - "traefik.http.routers.immich-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.immich-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.immich-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.immich-rtr.service=immich-svc"
      - "traefik.http.services.immich-svc.loadbalancer.server.port=3001"
    # ports:
    #   - 2283:3001
    restart: unless-stopped

  immich-microservices:
    image: ghcr.io/immich-app/immich-server:release
    entrypoint: ["/bin/sh", "./start-microservices.sh"]
    container_name: immich_microservices
    networks:
      immich_network:
        ipv4_address: 172.18.2.98
    volumes:
      - ${DATA_FOLDER}/photos:/usr/src/app/upload
    environment:
      - NODE_ENV=production
      - DB_HOSTNAME=postgres
      - DB_USERNAME=${IMMICH_DB_USER}
      - DB_PASSWORD=${IMMICH_DB_PASS}
      - DB_DATABASE_NAME=${IMMICH_DB}
      - REDIS_HOSTNAME=redis
      - ENABLE_MAPBOX=false
      - JWT_SECRET=${IMMICH_JWT_SECRET}
      - VITE_SERVER_ENDPOINT=https://photos.${DOMAIN_NAME}/api
      # OAuth settings : https://immich.app/docs/usage/oauth
      - OAUTH_ENABLED=true
      - OAUTH_ISSUER_URL=https://auth.${DOMAIN_NAME}/application/o/immich/
      - OAUTH_CLIENT_ID=${IMMICH_OAUTH_ID}
      - OAUTH_CLIENT_SECRET=${IMMICH_OAUTH_SECRET}
      # - OAUTH_SCOPE=   # Default to 'openid email profile'
      - OAUTH_AUTO_REGISTER=true
      - OAUT_BUTTON_TEXT="Login with Authentik"
    restart: unless-stopped

  immich-machine-learning:
    image: ghcr.io/immich-app/immich-machine-learning:release
    container_name: immich_machine_learning
    networks:
      immich_network:
        ipv4_address: 172.18.2.99
    volumes:
      - ${DATA_FOLDER}/photos:/usr/src/app/upload
      - ${CONFIG_FOLDER}/immich/model-cache:/cache
    environment:
      - NODE_ENV=production
      - DB_HOSTNAME=postgres
      - DB_USERNAME=${IMMICH_DB_USER}
      - DB_PASSWORD=${IMMICH_DB_PASS}
      - DB_DATABASE_NAME=${IMMICH_DB}
      - ENABLE_MAPBOX=false
      - JWT_SECRET=${IMMICH_JWT_SECRET}
      - VITE_SERVER_ENDPOINT=https://photos.${DOMAIN_NAME}/api
    restart: unless-stopped
  
  # Paperless-ngx - Document management
  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    networks:
      proxy_network:
        ipv4_address: 172.18.1.129
      paperless_network:
        ipv4_address: 172.18.2.89
    environment:
      - USERMAP_UID=${USERID}
      - USERMAP_GID=${GROUPID}

      - PAPERLESS_REDIS=redis://redis:6379
      - PAPERLESS_TIKA_ENABLED=1
      - PAPERLESS_TIKA_GOTENBERG_ENDPOINT=http://paperless-gotenberg:3000
      - PAPERLESS_TIKA_ENDPOINT=http://paperless-tika:9998
      # Additional languages
      - PAPERLESS_OCR_LANGUAGES=jpn jpn-vert
      - PAPERLESS_URL=https://paper.${DOMAIN_NAME}
      - PAPERLESS_SECRET_KEY=${PAPERLESS_KEY}
      - PAPERLESS_TIME_ZONE=Europe/Paris
      - PAPERLESS_OCR_LANGUAGE=fra
      - PAPERLESS_LOGGING_DIR=/var/log/paperless/
      - PAPERLESS_FILENAME_FORMAT={created_year}/{correspondent}/{title}
      # Login
      - PAPERLESS_ENABLE_HTTP_REMOTE_USER=true
      - PAPERLESS_HTTP_REMOTE_USER_HEADER_NAME=HTTP_X_AUTHENTIK_USERNAME
      - PAPERLESS_LOGOUT_REDIRECT_URL=https://auth.${DOMAIN_NAME}/flows/-/default/invalidation/
    volumes:
      - ${CONFIG_FOLDER}/paperlessngx:/usr/src/paperless/data
      - ${DATA_FOLDER}/paperlessngx:/usr/src/paperless/media
      - /var/log/paperless:/var/log/paperless
      # Export and import automatically
      # - ./export:/usr/src/paperless/export
      # - ./consume:/usr/src/paperless/consume
    labels:
      - "traefik.enable=true"
      ## HTTP Router
      - "traefik.http.routers.paperless-rtr.entrypoints=websecure"
      - "traefik.http.routers.paperless-rtr.rule=Host(`paper.${DOMAIN_NAME}`)"
      - "traefik.http.routers.paperless-rtr.priority=99"
      - "traefik.http.routers.paperless-rtr.tls=true"
      # - "traefik.http.routers.paperless-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.paperless-rtr.tls.options=tls-opts@file"
      ## API Router for apps
      - "traefik.http.routers.paperless-api-rtr.entrypoints=websecure"
      - "traefik.http.routers.paperless-api-rtr.rule=Host(`paper.${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.paperless-api-rtr.priority=100"
      - "traefik.http.routers.paperless-api-rtr.tls=true"
      # - "traefik.http.routers.paperless-api-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.paperless-api-rtr.tls.options=tls-opts@file"
      ## Middlewares
      # Of course only expose this to intranet
      - "traefik.http.routers.paperless-rtr.middlewares=local-ip-mw@docker,chain-forwardauth@docker"
      - "traefik.http.routers.paperless-api-rtr.middlewares=local-ip-mw@docker,chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.paperless-rtr.service=paperless-svc"
      - "traefik.http.routers.paperless-api-rtr.service=paperless-svc"
      - "traefik.http.services.paperless-svc.loadbalancer.server.port=8000"

    healthcheck:
      test: ["CMD", "curl", "-fs", "-S", "--max-time", "2", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 8089:8000
    restart: unless-stopped

  # Gotenberg
  gotenberg:
    image: docker.io/gotenberg/gotenberg:7.10
    container_name: paperless-gotenberg
    networks:
      paperless_network:
        ipv4_address: 172.18.2.91
    # The gotenberg chromium route is used to convert .eml files. We do not
    # want to allow external content like tracking pixels or even javascript.
    command:
      - "gotenberg"
      - "--chromium-disable-javascript=true"
      - "--chromium-allow-list=file:///tmp/.*"
    restart: unless-stopped

  # Tika : 
  tika:
    image: ghcr.io/paperless-ngx/tika:latest
    container_name: paperless-tika
    networks:
      paperless_network:
        ipv4_address: 172.18.2.92
    restart: unless-stopped

  # Memos - Note/memo server
  memos:
    image: ghcr.io/usememos/memos:latest
    container_name: memos
    networks:
      proxy_network: 
        ipv4_address: 172.18.1.132
    user: ${USERID}:${GROUPID}
    volumes:
      - ${CONFIG_FOLDER}/memos:/var/opt/memos
    ports:
      - 5230:5230
    labels:
      - "traefik.enable=true"
      # Web UI
      ## HTTP Router
      - "traefik.http.routers.memos-rtr.entrypoints=websecure"
      - "traefik.http.routers.memos-rtr.rule=Host(`memos.${DOMAIN_NAME}`)"
      - "traefik.http.routers.memos-rtr.tls=true"
      # - "traefik.http.routers.memos-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.memos-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.memos-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.memos-rtr.service=memos-svc"
      - "traefik.http.services.memos-svc.loadbalancer.server.port=5230"
    restart: unless-stopped
  # Outline - Wiki/Doc server
  outline:
    image: outlinewiki/outline:latest
    container_name: outline
    networks:
      proxy_network:
        ipv4_address: 172.18.1.133
      outline_network:
        ipv4_address: 172.18.2.121
    environment:
      # https://github.com/outline/outline/blob/main/.env.sample
      # https://github.com/outline/outline/discussions/3437
      - NODE_ENV=production

      - SECRET_KEY=${OUTLINE_SECRET_KEY}
      - UTILS_SECRET=${OUTLINE_UTILS_SECRET}

      # For production point these at your databases, in development the default
      # should work out of the box.
      - DATABASE_URL=postgres://${OUTLINE_PSQL_USER}:${OUTLINE_PSQL_PASS}@postgres:5432/outline
      # - DATABASE_URL_TEST=postgres://user:pass@localhost:5432/outline-test
      # - DATABASE_CONNECTION_POOL_MIN=
      # - DATABASE_CONNECTION_POOL_MAX=
      # Uncomment this to disable SSL for connecting to Postgres
      - PGSSLMODE=disable

      - REDIS_URL=redis://redis:6379

      - URL=https://wiki.${DOMAIN_NAME}
      - PORT=3852

      - AWS_ACCESS_KEY_ID=${OUTLINE_BUCKET_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${OUTLINE_BUCKET_SECRET_KEY}
      - AWS_REGION=${OUTLINE_BUCKET_REGION}
      # - AWS_S3_ACCELERATE_URL=
      - AWS_S3_UPLOAD_BUCKET_URL=https://bucket.${DOMAIN_NAME}  # Should be accessible from outside, especially for image display
      - AWS_S3_UPLOAD_BUCKET_NAME=outline
      - FILE_STORAGE_UPLOAD_MAX_SIZE=26214400
      # - AWS_S3_FORCE_PATH_STYLE=true
      # - AWS_S3_ACL=private

      - OIDC_CLIENT_ID=${OUTLINE_OIDC_CLIENT_ID}
      - OIDC_CLIENT_SECRET=${OUTLINE_OIDC_CLIENT_SECRET}
      - OIDC_AUTH_URI=https://auth.${DOMAIN_NAME}/application/o/authorize/
      - OIDC_TOKEN_URI=https://auth.${DOMAIN_NAME}/application/o/token/
      - OIDC_USERINFO_URI=https://auth.${DOMAIN_NAME}/application/o/userinfo/
      - OIDC_USERNAME_CLAIM=preferred_username
      - OIDC_DISPLAY_NAME=Authentik
      - OIDC_SCOPES=openid profile email
      
      - LOG_LEVEL=info
      - WEB_CONCURRENCY=1
      - MAXIMUM_IMPORT_SIZE=5120000
    # ports:
    #   - "3852:3852"
    labels:
      - "traefik.enable=true"
      # Web UI
      ## HTTP Router
      - "traefik.http.routers.outline-rtr.entrypoints=websecure"
      - "traefik.http.routers.outline-rtr.rule=Host(`wiki.${DOMAIN_NAME}`)"
      - "traefik.http.routers.outline-rtr.tls=true"
      - "traefik.http.routers.outline-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.outline-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.outline-rtr.service=outline-svc"
      - "traefik.http.services.outline-svc.loadbalancer.server.port=3852"
    volumes:
      - ${CONFIG_FOLDER}/outline:/var/lib/outline/data
    depends_on:
      - minio
    restart: unless-stopped
  # Minio - Bucket storage for Outline
  minio:
    image: minio/minio
    container_name: minio
    networks:
      proxy_network:
        ipv4_address: 172.18.1.134
      database_network:
        ipv4_address: 172.18.2.7
      outline_network:
        ipv4_address: 172.18.2.124
    # ports:
    # Bucket
    #   - "9005:9000"
    # Console
    #   - "9025:9025"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_SECRET_KEY}
      # - MINIO_DOMAIN=bucket.${DOMAIN_NAME}
      - MINIO_BROWSER=on
      - MINIO_SERVER_URL=https://bucket.${DOMAIN_NAME}
      # Console URL
      - MINIO_BROWSER_REDIRECT_URL=https://s3.${DOMAIN_NAME}
      # - MINIO_API_CORS_ALLOW_ORIGIN=*.${DOMAIN_NAME},${DOMAIN_NAME}
      # OIDC for bucket administration
      - MINIO_IDENTITY_OPENID_CONFIG_URL=https://auth.${DOMAIN_NAME}/application/o/minio/.well-known/openid-configuration
      - MINIO_IDENTITY_OPENID_CLIENT_ID=${MINIO_OAUTH_CLIENT_ID}
      - MINIO_IDENTITY_OPENID_CLIENT_SECRET=${MINIO_OAUTH_CLIENT_SECRET}
      - MINIO_IDENTITY_OPENID_CLAIM_USERINFO=https://auth.${DOMAIN_NAME}/application/o/userinfo/
      - MINIO_IDENTITY_OPENID_DISPLAY_NAME=Authentik
      - MINIO_IDENTITY_OPENID_SCOPES=openid,profile,email,minio # minio is a property mapping managed in Authentik
    entrypoint: sh
    command: -c 'minio server /data --console-address ":9025"'
    volumes:
      - ${DATA_FOLDER}/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://minio:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    labels:
      - "traefik.enable=true"
      ## HTTP Router
      - "traefik.http.routers.minio-rtr.entrypoints=websecure"
      - "traefik.http.routers.minio-rtr.rule=Host(`bucket.${DOMAIN_NAME}`)"
      - "traefik.http.routers.minio-rtr.tls=true"
      - "traefik.http.routers.minio-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.minio-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.minio-rtr.service=minio-svc"
      - "traefik.http.services.minio-svc.loadbalancer.server.port=9000"
      # Console
      ## HTTP Router
      - "traefik.http.routers.minio-console-rtr.entrypoints=websecure"
      - "traefik.http.routers.minio-console-rtr.rule=Host(`s3.${DOMAIN_NAME}`)"
      - "traefik.http.routers.minio-console-rtr.tls=true"
      - "traefik.http.routers.minio-console-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.minio-console-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.minio-console-rtr.service=minio-console-svc"
      - "traefik.http.services.minio-console-svc.loadbalancer.server.port=9025"
    restart: unless-stopped
  # Uptime-kuma - Status page
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    networks:
      proxy_network:
        ipv4_address: 172.18.1.135
      docker_sock_network:
        ipv4_address: 172.18.4.5
    volumes:
      - ${CONFIG_FOLDER}/uptimekuma:/app/data
    ports:
      - "13370:3001"
    restart: always
  
  # Wakapi - programming statistics
  wakapi:
    image: ghcr.io/muety/wakapi:latest
    container_name: wakapi
    networks:
      proxy_network:
        ipv4_address: 172.18.1.136
      wakapi_network:
        ipv4_address: 172.18.2.137
    environment:
      # See README.md and config.default.yml for all config options
      WAKAPI_PASSWORD_SALT: "${WAKAPI_PWD_SALT}"
      WAKAPI_DB_TYPE: "postgres"
      WAKAPI_DB_NAME: "${WAKAPI_DB_NAME}"
      WAKAPI_DB_USER: "${WAKAPI_DB_USER}"
      WAKAPI_DB_PASSWORD: "${WAKAPI_DB_PWD}"
      WAKAPI_DB_HOST: "postgres"
      WAKAPI_DB_PORT: "5432"
      ENVIRONMENT: "prod"
      # WAKAPI_SUPPORT_CONTACT: "contact@dev"
      WAKAPI_PUBLIC_URL: "https://wakapi.${DOMAIN_NAME}"
      WAKAPI_ALLOW_SIGNUP: false
      # WAKAPI_DISABLE_FRONTPAGE: true
    labels:
      - "traefik.enable=true"
      # Web UI
      ## HTTP Router
      - "traefik.http.routers.wakapi-rtr.entrypoints=websecure"
      - "traefik.http.routers.wakapi-rtr.rule=Host(`wakapi.${DOMAIN_NAME}`)"
      - "traefik.http.routers.wakapi-rtr.tls=true"
      - "traefik.http.routers.wakapi-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.wakapi-rtr.middlewares=chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.wakapi-rtr.service=wakapi-svc"
      - "traefik.http.services.wakapi-svc.loadbalancer.server.port=3000"
    volumes:
      - ${CONFIG_FOLDER}/wakapi:/data
    # ports:
    #   - 0.0.0.0:3144:3000
    restart: always

  # Gamevault - game distribution
  gamevault:
    container_name: gamevault
    image: phalcode/gamevault-backend:latest
    restart: unless-stopped
    networks:
      proxy_network:
        ipv4_address: 172.18.1.90
      gamevault_network:
        ipv4_address: 172.18.2.153
    environment:
      - PUID=${USERID}
      - PGID=${GROUPID}
      - DB_SYSTEM=POSTGRESQL
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=gamevault
      - DB_USERNAME=${GAMEVAULT_DB_USER}
      - DB_PASSWORD=${GAMEVAULT_DB_PWD}
      # The following line grants Admin Role to the account with this username upon registration.
      - SERVER_ADMIN_USERNAME=${GAMEVAULT_ADMIN_USER}
      # Uncomment and insert your RAWG API Key here if you have one (http://rawg.io/login?forward=developer)
      - RAWG_API_KEY=${GAMEVAULT_RAWG_KEY}
      - SERVER_ACCOUNT_ACTIVATION_DISABLED=true
      - SERVER_MAX_DOWNLOAD_BANDWIDTH_IN_KBPS=100000
    volumes:
      # Mount the folder where your games are
      - ${GAMEVAULT_DATA_FOLDER}/files:/files
      # Mount the folder where GameVault should store its images
      - ${GAMEVAULT_DATA_FOLDER}/images:/images
    labels:
      - "traefik.enable=true"
      # Web UI
      ## HTTP Router
      - "traefik.http.routers.gamevault-rtr.entrypoints=websecure"
      - "traefik.http.routers.gamevault-rtr.rule=Host(`games.${DOMAIN_NAME}`) && HeadersRegexp(`User-Agent`, `GameVault/*`)"
      - "traefik.http.routers.gamevault-rtr.tls=true"
      # - "traefik.http.routers.immich-rtr.tls.certresolver=letsencrypt"
      - "traefik.http.routers.gamevault-rtr.tls.options=tls-opts@file"
      ## Middlewares
      - "traefik.http.routers.gamevault-rtr.middlewares=local-ip-mw@docker,chain-noauth@docker"
      ## HTTP Services
      - "traefik.http.routers.gamevault-rtr.service=gamevault-svc"
      - "traefik.http.services.gamevault-svc.loadbalancer.server.port=8080"
    # ports:
    #   - 18435:8080

networks: # All these networks are created in the databases stack, which links services to their databases
  proxy_network:
    external: true
  firefly_network:
    external: true
  bookstack_network:
    external: true
  gitea_network:
    external: true
  tandoor_network:
    external: true
  paperless_network:
    external: true
  immich_network:
    external: true
  outline_network:
    external: true
  wakapi_network:
    external: true
  docker_sock_network:
    external: true
  gamevault_network:
    external: true
  database_network:
    external: true